建索引的幾大原則
最左前綴匹配原則，非常重要的原則，mysql會一直向右匹配直到遇到範圍查詢（>，<，between，like）就停止匹配，比如a = 1和b = 2且c> 3，d = 4如果建立（a，b，c，d）順序的索引，d是用不到索引的，如果建立（a，b，d，c）的索引則都可以用到，a，b，d的順序可以任意調整。
=和在可以亂序，比如a = 1和b = 2和c = 3建立（a，b，c）索引可以任意順序，mysql的查詢優化器會幫你優化成索引可以識別的形式
盡量選擇區分度高的列作為索引，區分度的公式是count（distinct col）/ count（*），表示字段不重複的比例，比例越大我們掃描的記錄數越少，唯一鍵的區分度是1，而一些狀態，性別字段可能在大數據面前區分度就是0，那可能有人會問，這個比例有什麼經驗值嗎？使用場景不同，這個值也很難確定，一般需要加入的字段我們都要求是0.1以上，即平均1條掃描10條記錄
索引列不能參與計算，保持列“乾淨”，比如from_unixtime（create_time）='2014-05-29'就不能使用到索引，原因很簡單，b +樹中存的都是數據表中的字段值，但進行檢索時，需要把所有元素都應用函數才能比較，顯然成本太大。所以語句應該寫成create_time = unix_timestamp（'2014-05-29'）;
盡量的擴展索引，不要新建索引。比如表中已經有一個的索引，現在要加（A，B）的索引，那麼只需要修改原來的索引即可

優化Mysql教學
https://xianyunyh.gitbooks.io/php-interview/Mysql/MySQL%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%8F%8A%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96.html

/*********************************************/

MySQL 地雷區
雷區 1 : 使用 != 、 <>、NOT 查詢會變全掃
SELECT * FROM user WHERE age != 20 ( bad 全掃 )
SELECT * FROM user WHERE age <> 20 ( bad 全掃 )
SELECT * FROM user WHERE age NOT IN(20) ( bad 全掃 )
雷區 2 : 用 like 且 % 在前面有索引也會變全掃
如果在 name 有建立索引，下面這種 sql 還是會變全掃。

SELECT * FROM user WHERE name like '%-Mark' ( bad 全掃 )
雷區 3 : 誤用 or 時會變全掃
索引欄位: {age}

SELECT * FROM user WHERE age = 18 OR name = 'C-Ian'; ( bad 全掃 )

索引欄位: {age},{name} 

SELECT * FROM user WHERE age = 18 OR name = 'C-Ian'; ( good 索引 )
但是如果是用 and 則反之。

索引欄位: {age}

SELECT * FROM user WHERE age = 18 AND name = 'C-Ian'; ( good 索引 )
雷區 4. 在 WHERE 欄位進行運算
索引欄位: {age}

SELECT * FROM user WHERE age/2 = 18; ( bad 全掃 )

SELECT * FROM user WHERE age = 18*2; ( good 索引 )
雷區 5 : 使用一些函數
下面簡單以 rand() 這方法來說明，當你使用它時，它就是一定跑全掃

SELECT * FROM test.user where age >= RAND(); ( bad 全掃 )
雷區 6 : SELECT * FROM
因為這樣可能會讓你所建立的『 覆蓋索引 』失效，導致要先至 secondary index 查找再去。 clustered Index 抓資料。

索引欄位: {name}

SELECT * FROM user; ( bad 會走 secondary index 再至 clustered Index )

SELECT name FROM user; ( good 只會走 secondary index )
雷區 7 : 使用 ORDER BY RAND()
當你確定資料量非常小的情況下使用還行，但是資料量大時，你資料庫一定會倒。如果真的要做請把資料拉到應用層在做，資料庫真的非常的忙。

SELECT * FROM test.user where age <= 18 ORDER BY RAND(); ( bad 會需要耗費空間排序 )
